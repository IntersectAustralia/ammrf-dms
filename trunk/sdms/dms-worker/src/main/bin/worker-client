#!/bin/bash
# Command line launcher for worker; based on ActiveMQ script
# ---------------------
# Backup invocation parameters
WORKER_HOME="`dirname $0`"
WORKER_HOME=`cd "$WORKER_HOME"; cd ..; pwd`
cd "$WORKER_HOME"

CLASSPATH=`ls -1d lib lib/*.jar | (while read jar; do if [ -z "$cp" ]; then cp=$jar; else cp="${cp}:$jar"; fi; done; echo $cp)`

if [ -f ~/.workerrc ]; then
  . ~/.workerrc
fi

# location of properties file
if [ -z "$WORKER_PROPERTIES" ]; then
  echo "WORKER_PROPERTIES not configured (please provide ~/.workerrc)"
  exit 1
fi

# location of PID file
if [ -z "$WORKER_PIDFILE" ]; then
  WORKER_PIDFILE="$WORKER_HOME/worker.pid"
fi

# Location of the java installation
# Specify the location of your java installation using JAVA_HOME, or specify the 
# path to the "java" binary using JAVACMD
# (set JAVACMD to "auto" for automatic detection)
#JAVA_HOME=""
JAVACMD="auto"

# Configure a user with non root priviledges, if no user is specified do not change user
WORKER_USER=""

# Set jvm memory configuration
WORKER_OPTS_MEMORY="-Xms256M -Xmx256M"

# Uncomment to enable remote debugging
#WORKER_DEBUG_OPTS="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"

## END:DEFAULTCONFIG

# ------------------------------------------------------------------------

# Detect the location of the java binary
if [ -z "$JAVACMD" ] || [ "$JAVACMD" = "auto" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  fi
fi

# Hm, we still do not know the location of the java binary
if [ ! -x "$JAVACMD" ] ; then
    JAVACMD=`which java 2> /dev/null `
    if [ -z "$JAVACMD" ] ; then
        JAVACMD=java
    fi
fi
# Stop here if no java installation is defined/found
if [ ! -x "$JAVACMD" ] ; then
  echo "ERROR: Configuration varaiable JAVA_HOME or JAVACMD is not defined correctly."
  echo "       (JAVA_HOME='$JAVAHOME', JAVACMD='$JAVACMD')"
  exit 1
fi

# ------------------------------------------------------------------------
# HELPER FUNCTIONS
# Start the worker
#
# @ARG1 : the name of the PID-file
#         If specified, this function starts the java process in background as a daemon
#         and stores the pid of the created process in the file.
#         Output on stdout/stderr will be supressed if this parameter is specified
# @RET  : If unless 0 something went wrong
#
# Note: This function uses a lot of globally defined variables
# - if $WORKER_USER is set, the function tries starts the java process whith the specified
#   user
invokeJar(){
   $JAVACMD $WORKER_PROPERTIES $WORKER_DEBUG_OPTS $WORKER_OPTS_MEMORY -cp $CLASSPATH au.org.intersect.dms.wn.main.Main "$@"
   return $?
}

# Check if Worker is running
#
# @RET  : 0 => the worker process is running
#         1 => process id in $WORKER_PIDFILE does not exist anymore
#         2 => something is wrong with the pid file
#
# Note: This function uses globally defined variables
# - $WORKER_PIDFILE : the name of the pid file


checkRunning(){
    if [ -f "$WORKER_PIDFILE" ]; then
       if  [ -z "$(cat $WORKER_PIDFILE)" ];then
        echo "ERROR: Pidfile '$WORKER_PIDFILE' exists but contains no pid"
        return 2
       fi
       if (ps -p $(cat $WORKER_PIDFILE)|grep java >/dev/null);then
         return 0;
       else
         return 1;
       fi
    else
         return 1;
    fi
}


# Start Worker if not already running
#
# @RET  : 0 => is now started, is already started
#         !0 => something went wrong
#
# Note: This function uses globally defined variables
# - $WORKER_PIDFILE      : the name of the pid file

invoke_start(){
    if ( checkRunning );then
      invokeJar "$@"
      exit "$?" 
    fi

    echo "Worker doesn't seem to be running"
    exit 1
}




# ------------------------------------------------------------------------
# MAIN

invoke_start "$@"
