// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.org.intersect.dms.bookinggw.domain;

import au.org.intersect.dms.bookinggw.domain.Participants;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Participants_Roo_Entity {
    
    declare @type: Participants: @Entity;
    
    declare @type: Participants: @Table(name = "participants");
    
    @PersistenceContext(unitName = "bookinggwPU")
    transient EntityManager Participants.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "regno")
    private Long Participants.regno;
    
    public Long Participants.getRegno() {
        return this.regno;
    }
    
    public void Participants.setRegno(Long id) {
        this.regno = id;
    }
    
    @Transactional
    public void Participants.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Participants.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Participants attached = this.entityManager.find(this.getClass(), this.regno);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Participants.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public Participants Participants.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Participants merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Participants.entityManager() {
        EntityManager em = new Participants().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Participants.countParticipantses() {
        return entityManager().createQuery("select count(o) from Participants o", Long.class).getSingleResult();
    }
    
    public static List<Participants> Participants.findAllParticipantses() {
        return entityManager().createQuery("select o from Participants o", Participants.class).getResultList();
    }
    
    public static Participants Participants.findParticipants(Long id) {
        if (id == null) return null;
        return entityManager().find(Participants.class, id);
    }
    
    public static List<Participants> Participants.findParticipantsEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from Participants o", Participants.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
