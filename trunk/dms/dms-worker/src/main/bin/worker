#!/bin/bash
# Command line launcher for worker; based on ActiveMQ script
# ---------------------
# Backup invocation parameters
COMMANDLINE_ARGS="$@"

WORKER_HOME="`dirname $0`"
WORKER_HOME=`cd "$WORKER_HOME"; cd ..; pwd`
cd "$WORKER_HOME"

CLASSPATH=`ls -1d lib lib/*.jar | (while read jar; do if [ -z "$cp" ]; then cp=$jar; else cp="${cp}:$jar"; fi; done; echo $cp)`

if [ -f ~/.workerrc ]; then
  . ~/.workerrc
fi

# location of properties file
if [ -z "$WORKER_PROPERTIES" ]; then
  echo "WORKER_PROPERTIES not configured (please provide ~/.workerrc)"
  exit 1
fi

# location of PID file
if [ -z "$WORKER_PIDFILE" ]; then
  WORKER_PIDFILE="$WORKER_HOME/worker.pid"
fi

# Location of the java installation
# Specify the location of your java installation using JAVA_HOME, or specify the 
# path to the "java" binary using JAVACMD
# (set JAVACMD to "auto" for automatic detection)
#JAVA_HOME=""
JAVACMD="auto"

# Configure a user with non root priviledges, if no user is specified do not change user
WORKER_USER=""

# Set jvm memory configuration
WORKER_OPTS_MEMORY="-Xms256M -Xmx256M"

# Uncomment to enable remote debugging
#WORKER_DEBUG_OPTS="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"

## END:DEFAULTCONFIG

# ------------------------------------------------------------------------

# Detect the location of the java binary
if [ -z "$JAVACMD" ] || [ "$JAVACMD" = "auto" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  fi
fi

# Hm, we still do not know the location of the java binary
if [ ! -x "$JAVACMD" ] ; then
    JAVACMD=`which java 2> /dev/null `
    if [ -z "$JAVACMD" ] ; then
        JAVACMD=java
    fi
fi
# Stop here if no java installation is defined/found
if [ ! -x "$JAVACMD" ] ; then
  echo "ERROR: Configuration varaiable JAVA_HOME or JAVACMD is not defined correctly."
  echo "       (JAVA_HOME='$JAVAHOME', JAVACMD='$JAVACMD')"
  exit 1
fi

echo "INFO: Using java '$JAVACMD'"


# ------------------------------------------------------------------------
# HELPER FUNCTIONS
# Start the worker
#
# @ARG1 : the name of the PID-file
#         If specified, this function starts the java process in background as a daemon
#         and stores the pid of the created process in the file.
#         Output on stdout/stderr will be supressed if this parameter is specified
# @RET  : If unless 0 something went wrong
#
# Note: This function uses a lot of globally defined variables
# - if $WORKER_USER is set, the function tries starts the java process whith the specified
#   user
invokeJar(){
   local PIDFILE="$1"
   local RET="1"
   local CUSER="$(whoami 2>/dev/null)"

   # Solaris fix
   if ( ! [ $? -eq 0 ] ) ; then
    local CUSER="$(/usr/ucb/whoami)"
   fi

   if ( [ -z "$WORKER_USER" ] || [ "$WORKER_USER" = "$CUSER" ] );then
      DOIT_PREFIX="sh -c "
      DOIT_POSTFIX=";"
   elif [ "$(id -u)" = "0" ];then
      DOIT_PREFIX="su -c "
      DOIT_POSTFIX=" - $WORKER_USER"
      echo "INFO: changing to user '$WORKER_USER' to invoke java"
   fi
   # Execute java binary
   echo "STARTING WORKER WITH PROPERTIES: $WORKER_PROPERTIES"
   if [ -n "$PIDFILE" ];then
      $DOIT_PREFIX "$JAVACMD $WORKER_PROPERTIES $WORKER_DEBUG_OPTS $WORKER_OPTS_MEMORY \
              -cp \"$CLASSPATH\" org.apache.camel.spring.Main -ac classpath*:META-INF/spring/applicationContext-workernode*.xml >$WORKER_HOME/worker.out 2>&1 & 
              RET=\"\$?\"; APID=\"\$!\";
              echo \$APID > $PIDFILE;
              echo \"INFO: pidfile created : '$PIDFILE' (pid '\$APID')\";exit \$RET" $DOIT_POSTFIX
      RET="$?"
   else
      $DOIT_PREFIX "$JAVACMD $WORKER_PROPERTIES $WORKER_DEBUG_OPTS $WORKER_OPTS_MEMORY \
              -cp $CLASSPATH org.apache.camel.spring.Main -ac classpath*:META-INF/spring/applicationContext-workernode*.xml" $DOIT_POSTFIX
      RET="$?"
   fi
   return $RET
}

# Check if Worker is running
#
# @RET  : 0 => the worker process is running
#         1 => process id in $WORKER_PIDFILE does not exist anymore
#         2 => something is wrong with the pid file
#
# Note: This function uses globally defined variables
# - $WORKER_PIDFILE : the name of the pid file


checkRunning(){
    if [ -f "$WORKER_PIDFILE" ]; then
       if  [ -z "$(cat $WORKER_PIDFILE)" ];then
        echo "ERROR: Pidfile '$WORKER_PIDFILE' exists but contains no pid"
        return 2
       fi
       if (ps -p $(cat $WORKER_PIDFILE)|grep java >/dev/null);then
         return 0;
       else
         return 1;
       fi
    else
         return 1;
    fi
}

# Check if Worker is running
#
# @RET  : 0 => the worker process is running
#         1 => the worker process is not running
#
# Note: This function uses globally defined variables
# - $WORKER_PIDFILE : the name of the pid file


invoke_status(){
    if ( checkRunning );then
         echo "Worker is running (pid '$(cat $WORKER_PIDFILE)')"
         exit 0
    fi
    echo "Worker not running"
    exit 1
}

# Start Worker if not already running
#
# @RET  : 0 => is now started, is already started
#         !0 => something went wrong
#
# Note: This function uses globally defined variables
# - $WORKER_PIDFILE      : the name of the pid file

invoke_start(){
    if ( checkRunning );then
      echo "INFO: Process with pid '$(cat $WORKER_PIDFILE)' is already running"
      exit 0
    fi

    echo "INFO: Starting - inspect logfiles specified in logging.properties and log4j.properties to get details"
    invokeJar $WORKER_PIDFILE
    exit "$?" 
}

# Start Worker in foreground (for debugging)
#
# @RET  : 0 => is now started, is already started
#         !0 => something went wrong
#
# Note: This function uses globally defined variables
# - $WORKER_PIDFILE      : the name of the pid file

invoke_console(){
    if ( checkRunning );then
      echo "ERROR: Worker is already running"
      exit 1
    fi
    echo "INFO: Starting in foreground, this is just for debugging purposes (stop process by pressing CTRL+C)"
    invokeJar
    exit "$?" 
}

# Stop Worker
#
# @RET  : 0 => stop was successful
#         !0 => something went wrong
#
# Note: This function uses globally defined variables
# - $ACTIVEMQ_PIDFILE         : the name of the pid file
# - $ACTIVEMQ_KILL_MAXSECONDS : the number of seconds to wait for termination of broker after sending 
#                              shutdown signal by jmx interface

invoke_stop(){
    RET="1"
    if ( checkRunning );then
         echo
         echo "INFO: sending SIGTERM to process with pid '$(cat $WORKER_PIDFILE)'"
         kill -SIGTERM $(cat $WORKER_PIDFILE)
         RET="1"
    elif [ -f "$WORKER_PIDFILE" ];then
       echo "ERROR: No or outdated process id in '$WORKER_PIDFILE'"
       echo
       echo "INFO: Removing $WORKER_PIDFILE"
    else
       echo "Worker not running"
       exit 0
    fi
    rm -f $WORKER_PIDFILE >/dev/null 2>&1
    exit $RET
}

show_help() {
  cat << EOF
Tasks provided by the sysv init script:
    start           - starts instance
    stop            - stops running instance
    restart         - stop running instance (is there is one), start new instance
    console         - start Worker in foreground, useful for debugging purposes
    status          - check if Worker process is running

Configuration of this script:
    Set the following environment variables WORKER_PROPERTIES, WORKER_PIDFILE, WORKER_USER
EOF
  exit 0
}

# ------------------------------------------------------------------------
# MAIN

# show help
if [ -z "$1" ];then
 show_help
fi

case "$1" in
  status)    
      invoke_status
    ;;
  restart)
    if ( checkRunning );then
      $0 stop
    fi
    $0 status
    $0 start
    $0 status
    ;;
  start)    
    invoke_start
    ;;
  console)
    invoke_console
    ;;
  stop)    
    invoke_stop
    ;;
esac
