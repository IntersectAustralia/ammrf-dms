// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.org.intersect.dms.bookinggw.domain;

import au.org.intersect.dms.bookinggw.domain.EzObjectsNames;
import au.org.intersect.dms.bookinggw.domain.EzObjectsNamesPK;
import java.util.List;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect EzObjectsNames_Roo_Entity {
    
    declare @type: EzObjectsNames: @Entity;
    
    declare @type: EzObjectsNames: @Table(name = "EZ_ObjectNames");
    
    @PersistenceContext(unitName = "bookinggwPU")
    transient EntityManager EzObjectsNames.entityManager;
    
    @EmbeddedId
    private EzObjectsNamesPK EzObjectsNames.id;
    
    public EzObjectsNamesPK EzObjectsNames.getId() {
        return this.id;
    }
    
    public void EzObjectsNames.setId(EzObjectsNamesPK id) {
        this.id = id;
    }
    
    @Transactional
    public void EzObjectsNames.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void EzObjectsNames.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            EzObjectsNames attached = this.entityManager.find(this.getClass(), this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void EzObjectsNames.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public EzObjectsNames EzObjectsNames.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        EzObjectsNames merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager EzObjectsNames.entityManager() {
        EntityManager em = new EzObjectsNames().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long EzObjectsNames.countEzObjectsNameses() {
        return entityManager().createQuery("select count(o) from EzObjectsNames o", Long.class).getSingleResult();
    }
    
    public static List<EzObjectsNames> EzObjectsNames.findAllEzObjectsNameses() {
        return entityManager().createQuery("select o from EzObjectsNames o", EzObjectsNames.class).getResultList();
    }
    
    public static EzObjectsNames EzObjectsNames.findEzObjectsNames(EzObjectsNamesPK id) {
        if (id == null) return null;
        return entityManager().find(EzObjectsNames.class, id);
    }
    
    public static List<EzObjectsNames> EzObjectsNames.findEzObjectsNamesEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from EzObjectsNames o", EzObjectsNames.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
