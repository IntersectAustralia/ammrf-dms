// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.org.intersect.dms.bookinggw.domain;

import au.org.intersect.dms.bookinggw.domain.AgsUsersBookings;
import au.org.intersect.dms.bookinggw.domain.AgsUsersBookingsPK;
import java.util.List;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AgsUsersBookings_Roo_Entity {
    
    declare @type: AgsUsersBookings: @Entity;
    
    declare @type: AgsUsersBookings: @Table(name = "ags_users_bookings");
    
    @PersistenceContext(unitName = "bookinggwPU")
    transient EntityManager AgsUsersBookings.entityManager;
    
    @EmbeddedId
    private AgsUsersBookingsPK AgsUsersBookings.id;
    
    public AgsUsersBookingsPK AgsUsersBookings.getId() {
        return this.id;
    }
    
    public void AgsUsersBookings.setId(AgsUsersBookingsPK id) {
        this.id = id;
    }
    
    @Transactional
    public void AgsUsersBookings.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void AgsUsersBookings.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AgsUsersBookings attached = this.entityManager.find(this.getClass(), this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AgsUsersBookings.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public AgsUsersBookings AgsUsersBookings.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AgsUsersBookings merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager AgsUsersBookings.entityManager() {
        EntityManager em = new AgsUsersBookings().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long AgsUsersBookings.countAgsUsersBookingses() {
        return entityManager().createQuery("select count(o) from AgsUsersBookings o", Long.class).getSingleResult();
    }
    
    public static List<AgsUsersBookings> AgsUsersBookings.findAllAgsUsersBookingses() {
        return entityManager().createQuery("select o from AgsUsersBookings o", AgsUsersBookings.class).getResultList();
    }
    
    public static AgsUsersBookings AgsUsersBookings.findAgsUsersBookings(AgsUsersBookingsPK id) {
        if (id == null) return null;
        return entityManager().find(AgsUsersBookings.class, id);
    }
    
    public static List<AgsUsersBookings> AgsUsersBookings.findAgsUsersBookingsEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from AgsUsersBookings o", AgsUsersBookings.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
