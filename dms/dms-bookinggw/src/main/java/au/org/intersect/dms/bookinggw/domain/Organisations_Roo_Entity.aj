// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.org.intersect.dms.bookinggw.domain;

import au.org.intersect.dms.bookinggw.domain.Organisations;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Organisations_Roo_Entity {
    
    declare @type: Organisations: @Entity;
    
    declare @type: Organisations: @Table(name = "organisations");
    
    @PersistenceContext(unitName = "bookinggwPU")
    transient EntityManager Organisations.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "orgid")
    private Long Organisations.orgid;
    
    public Long Organisations.getOrgid() {
        return this.orgid;
    }
    
    public void Organisations.setOrgid(Long id) {
        this.orgid = id;
    }
    
    @Transactional
    public void Organisations.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Organisations.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Organisations attached = this.entityManager.find(this.getClass(), this.orgid);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Organisations.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public Organisations Organisations.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Organisations merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Organisations.entityManager() {
        EntityManager em = new Organisations().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Organisations.countOrganisationses() {
        return entityManager().createQuery("select count(o) from Organisations o", Long.class).getSingleResult();
    }
    
    public static List<Organisations> Organisations.findAllOrganisationses() {
        return entityManager().createQuery("select o from Organisations o", Organisations.class).getResultList();
    }
    
    public static Organisations Organisations.findOrganisations(Long id) {
        if (id == null) return null;
        return entityManager().find(Organisations.class, id);
    }
    
    public static List<Organisations> Organisations.findOrganisationsEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from Organisations o", Organisations.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
