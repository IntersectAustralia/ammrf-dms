// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.org.intersect.dms.bookinggw.domain;

import au.org.intersect.dms.bookinggw.domain.AgsUsers;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AgsUsers_Roo_Entity {
    
    declare @type: AgsUsers: @Entity;
    
    declare @type: AgsUsers: @Table(name = "ags_users");
    
    @PersistenceContext(unitName = "bookinggwPU")
    transient EntityManager AgsUsers.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "userid")
    private Long AgsUsers.userid;
    
    public Long AgsUsers.getUserid() {
        return this.userid;
    }
    
    public void AgsUsers.setUserid(Long id) {
        this.userid = id;
    }
    
    @Transactional
    public void AgsUsers.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void AgsUsers.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AgsUsers attached = this.entityManager.find(this.getClass(), this.userid);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AgsUsers.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public AgsUsers AgsUsers.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AgsUsers merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager AgsUsers.entityManager() {
        EntityManager em = new AgsUsers().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long AgsUsers.countAgsUserses() {
        return entityManager().createQuery("select count(o) from AgsUsers o", Long.class).getSingleResult();
    }
    
    public static List<AgsUsers> AgsUsers.findAllAgsUserses() {
        return entityManager().createQuery("select o from AgsUsers o", AgsUsers.class).getResultList();
    }
    
    public static AgsUsers AgsUsers.findAgsUsers(Long id) {
        if (id == null) return null;
        return entityManager().find(AgsUsers.class, id);
    }
    
    public static List<AgsUsers> AgsUsers.findAgsUsersEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from AgsUsers o", AgsUsers.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
