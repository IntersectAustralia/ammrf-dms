// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.org.intersect.dms.service.domain;

import au.org.intersect.dms.service.domain.DmsUser;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DmsUser_Roo_Entity {
    
    @PersistenceContext(unitName = "servicePU")
    transient EntityManager DmsUser.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long DmsUser.id;
    
    @Version
    @Column(name = "version")
    private Integer DmsUser.version;
    
    public Long DmsUser.getId() {
        return this.id;
    }
    
    public void DmsUser.setId(Long id) {
        this.id = id;
    }
    
    public Integer DmsUser.getVersion() {
        return this.version;
    }
    
    public void DmsUser.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void DmsUser.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void DmsUser.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DmsUser attached = this.entityManager.find(this.getClass(), this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void DmsUser.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public DmsUser DmsUser.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        DmsUser merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager DmsUser.entityManager() {
        EntityManager em = new DmsUser().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long DmsUser.countDmsUsers() {
        return entityManager().createQuery("select count(o) from DmsUser o", Long.class).getSingleResult();
    }
    
    public static List<DmsUser> DmsUser.findAllDmsUsers() {
        return entityManager().createQuery("select o from DmsUser o", DmsUser.class).getResultList();
    }
    
    public static DmsUser DmsUser.findDmsUser(Long id) {
        if (id == null) return null;
        return entityManager().find(DmsUser.class, id);
    }
    
    public static List<DmsUser> DmsUser.findDmsUserEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from DmsUser o", DmsUser.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
